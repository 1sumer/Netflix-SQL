-- 1. List the total sales amount generated by each product.
SELECT 
    P.product_name, 
    SUM(OD.quantity * OD.price) AS total_sales
FROM 
    OrderDetails OD
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    P.product_name
ORDER BY 
    total_sales DESC;

--2. Identify the top 5 customers who have spent the most on purchases.
SELECT 
    C.first_name, 
    C.last_name, 
    SUM(O.total_amount) AS total_spent
FROM 
    Orders O
JOIN 
    Customers C ON O.customer_id = C.customer_id
GROUP BY 
    C.first_name, C.last_name
ORDER BY 
    total_spent DESC
LIMIT 5;

--3. Determine the inventory status by calculating the stock available after considering all orders.
SELECT 
    P.product_name, 
    P.stock_quantity - COALESCE(SUM(OD.quantity), 0) AS current_stock
FROM 
    Products P
LEFT JOIN 
    OrderDetails OD ON P.product_id = OD.product_id
GROUP BY 
    P.product_name, P.stock_quantity;

--4. Find the most popular product category based on the number of orders.
SELECT 
    P.category, 
    COUNT(DISTINCT O.order_id) AS number_of_orders
FROM 
    OrderDetails OD
JOIN 
    Products P ON OD.product_id = P.product_id
JOIN 
    Orders O ON OD.order_id = O.order_id
GROUP BY 
    P.category
ORDER BY 
    number_of_orders DESC
LIMIT 1;

--5. Calculate the average order value (AOV) for the company.
SELECT 
    AVG(total_amount) AS average_order_value
FROM 
    Orders;

-- 6. Identify customers who have placed more than 3 orders.
SELECT 
    C.first_name, 
    C.last_name, 
    COUNT(O.order_id) AS order_count
FROM 
    Orders O
JOIN 
    Customers C ON O.customer_id = C.customer_id
GROUP BY 
    C.first_name, C.last_name
HAVING 
    order_count > 2;

-- 7. Determine the products that have never been sold.
SELECT 
    P.product_name
FROM 
    Products P
LEFT JOIN 
    OrderDetails OD ON P.product_id = OD.product_id
WHERE 
    OD.product_id IS NULL;

--8. Calculate the total quantity received for each product and compare it with the total quantity sold.
SELECT 
    P.product_name,
    COALESCE(SUM(I.quantity_received), 0) AS total_received,
    COALESCE(SUM(OD.quantity), 0) AS total_sold
FROM 
    Products P
LEFT JOIN 
    Inventory I ON P.product_id = I.product_id
LEFT JOIN 
    OrderDetails OD ON P.product_id = OD.product_id
GROUP BY 
    P.product_name;

--9. Identify the day with the highest sales in the last 30 days.
SELECT
    O.order_date,
    SUM(O.total_amount) AS total_sales
FROM
    Orders O
WHERE
    O.order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY
    O.order_date
ORDER BY
    total_sales DESC
LIMIT 1;

SELECT 
    order_date, 
    SUM(total_amount) AS daily_sales
FROM 
    Orders
WHERE 
    order_date >= CURDATE() - INTERVAL 30 DAY
GROUP BY 
    order_date
ORDER BY 
    daily_sales DESC
LIMIT 1;


-- 10. Find all orders where the total amount exceeds the average order value.
SELECT 
    order_id, 
    total_amount
FROM 
    Orders
WHERE 
    total_amount > (SELECT AVG(total_amount) FROM Orders);

--11. Calculate the total number of products sold by each product category.
SELECT 
    P.category, 
    SUM(OD.quantity) AS total_sold
FROM 
    OrderDetails OD
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    P.category
ORDER BY 
    total_sold DESC;

--12. Identify customers who have not placed any orders in the last 6 months.
SELECT 
    C.first_name, 
    C.last_name
FROM 
    Customers C
LEFT JOIN 
    Orders O ON C.customer_id = O.customer_id AND O.order_date >= CURDATE() - INTERVAL 6 MONTH
WHERE 
    O.order_id IS NULL;

-- 13. Determine the most popular product for each customer based on the quantity purchased.
SELECT 
    C.first_name, 
    C.last_name, 
    P.product_name, 
    MAX(OD.quantity) AS quantity_purchased
FROM 
    Orders O
JOIN 
    Customers C ON O.customer_id = C.customer_id
JOIN 
    OrderDetails OD ON O.order_id = OD.order_id
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    C.first_name, C.last_name, P.product_name
ORDER BY 
    quantity_purchased DESC;

-- 14. Calculate the reorder point for each product, assuming a reorder point formula of (average_daily_sales * lead_time).
SELECT 
    P.product_name, 
    SUM(OD.quantity) / 30 AS average_daily_sales, 
    (SUM(OD.quantity) / 30) * 7 AS reorder_point -- Assuming a lead time of 7 days
FROM 
    OrderDetails OD
JOIN 
    Products P ON OD.product_id = P.product_id
GROUP BY 
    P.product_name;

-- 15. Calculate the profit margin for each product, assuming the cost is 70% of the selling price.
SELECT 
    P.product_name, 
    P.price, 
    (P.price - (P.price * 0.70)) AS profit_margin
FROM 
    Products P;
